const jwt = require("jsonwebtoken");
const bcrypt = require('bcrypt');
const User = require("../models/userModel");

exports.signup = async (req, res, next) => {
  // const {name, email, password, passwordConfirm} = req.body;
  try {
    const { name, email, password, passwordConfirm } = req.body;
    const newUser = await User.create({
      name: name,
      email: email,
      password: password,
      passwordConfirm: passwordConfirm,
    });
    const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {
      expiresIn: process.env.JWT_EXPIRE,
    });
    res.status(201).json({
      status: "success",
      token,
      user: jwt.decode(token),
    });
  } catch (error) {
    res.status(400).json({
      status: "fail",
      message: error.message,
    });
  }
};

exports.login = async (req, res,next) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({
      status: "fail",
      error: "email or password or both left blank",
    });
  }

  try {
    const user = await User.findOne({ email: email });
    console.log(user.password);
    const isMatch = await bcrypt.compare(password, user.password);
    if (isMatch) {
      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
        expiresIn: process.env.JWT_EXPIRE,
      });
      res.status(200).json({
        status: "success",
        user: jwt.decode(token)
        // user: user,
      });
      next();
    }
    return res.status(400).json({
      status: "fail",
      message: "password isn't correct"
    });
  } catch (error) {
    return res.status(400).json({
      status: "fail",
      error: error.message,
    });
  }
};
